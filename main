import datetime

class TodoItem:
    def __init__(self, title, date):
        self.title = title
        self.date = date

class ScheduleManager:
    def __init__(self):
        self.todo_list = []
    
    def add_todo_item(self, title, date):
        todo_item = TodoItem(title, date)
        self.todo_list.append(todo_item)
        print("待办事项已添加。")
    
    def view_todo_list(self):
        if not self.todo_list:
            print("待办事项列表为空。")
            return
        
        print("待办事项列表：")
        for index, todo_item in enumerate(self.todo_list, start=1):
            print(f"{index}. 标题：{todo_item.title}，日期：{todo_item.date}")
    
    def edit_todo_item(self, index, title, date):
        if index < 1 or index > len(self.todo_list):
            print("无效的索引。")
            return
        
        todo_item = self.todo_list[index - 1]
        todo_item.title = title
        todo_item.date = date
        print("待办事项已更新。")
    
    def delete_todo_item(self, index):
        if index < 1 or index > len(self.todo_list):
            print("无效的索引。")
            return
        
        del self.todo_list[index - 1]
        print("待办事项已删除。")
    
    def check_reminders(self):
        current_datetime = datetime.datetime.now()
        
        for todo_item in self.todo_list:
            if todo_item.date <= current_datetime:
                print(f"提醒：{todo_item.title}，日期：{todo_item.date}")

schedule_manager = ScheduleManager()

print("日程管理工具命令行工具")

while True:
    print("\n请选择操作：")
    print("1. 添加待办事项")
    print("2. 查看待办事项列表")
    print("3. 编辑待办事项")
    print("4. 删除待办事项")
    print("5. 检查提醒")
    print("6. 退出程序")
    
    choice = input("请选择操作（输入数字）：")
    
    if choice == '6':
        print("谢谢使用，再见！")
        break
    
    if choice != '1' and choice != '2' and choice != '3' and choice != '4' and choice != '5':
        print("无效的选择，请重新输入。")
        continue
    
    if choice == '1':
        title = input("请输入待办事项的标题：")
        date_str = input("请输入待办事项的日期和时间（YYYY-MM-DD HH:MM）：")
        date = datetime.datetime.strptime(date_str, '%Y-%m-%d %H:%M')
        schedule_manager.add_todo_item(title, date)
    
    elif choice == '2':
        schedule_manager.view_todo_list()
    
    elif choice == '3':
        index = int(input("请输入要编辑的待办事项的索引："))
        title = input("请输入新的标题：")
        date_str = input("请输入新的日期和时间（YYYY-MM-DD HH:MM）：")
        date = datetime.datetime.strptime(date_str, '%Y-%m-%d %H:%M')
        schedule_manager.edit_todo_item(index, title, date)
    
    elif choice == '4':
        index = int(input("请输入要删除的待办事项的索引："))
        schedule_manager.delete_todo_item(index)
    
    elif choice == '5':
        schedule_manager.check_reminders()
//以上代码是一个简单的日程管理工具命令行程序。用户可以选择添加、查看、编辑、删除待办事项，以及检查提醒功能。

//TodoItem类表示一个待办事项，具有标题和日期属性。ScheduleManager类管理待办事项列表，并提供添加、查看、编辑、删除和检查提醒的方法。

//应用程序使用一个无限循环来等待用户输入操作和相应的信息，并根据用户选择执行相应的操作。用户可以选择退出程序来结束应用程序的运行。

//请注意，这只是一个简单的示例，用于管理日程和提醒。在实际项目中，您可能需要考虑更复杂的功能，如持久化数据、用户身份验证、日程过滤等，以实现一个更全面和实用的日程管理工具。
